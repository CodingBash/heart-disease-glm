#8.3d
res.polr.natreat=polr(response~sex,weights=frequency,data=tumor, Hess=TRUE)
anova(res.polr, res.polr.natreat)
summary(res.polr.natreat)
library(VGAM)
res.logit <- vglm(response ~ treatment + sex, cratio(link = "logitlink", parallel = TRUE), weights = frequency, data = tumor)
res.probit <- vglm(response ~ treatment + sex, cratio(link = "probitlink", parallel = TRUE), weights = frequency, data = tumor)
res.cloglog <- vglm(response ~ treatment + sex, cratio(link = "clogloglink", parallel = TRUE), weights = frequency, data = tumor)
summary(res.logit)
summary(probit)
summary(res.probit)
summary(res.cloglog)
#8.3b CANNOT GET RESIDUALS
fitted(res.polr)
summary(res.polr)
library("nnet")
library(MASS)
library(ordinal)
### 9.2a
insurance=read.csv("C:/Users/bbecerra/Documents/School/CH8 HW/insurance.csv")
colnames(insurance)[1] = "car"
car_rates <- sapply(unique(insurance$car), function(car_id){
target <- insurance[insurance$car == car_id,]
rate <- sum(target$y_0 + target$y_1) / sum(target$n_0 + target$n_1)
return(rate)
})
plot(seq_along(car_rates), car_rates, main="Car Category")
age_rates <- sapply(unique(insurance$age), function(age_id){
target <- insurance[insurance$age == age_id,]
rate <- sum(target$y_0 + target$y_1) / sum(target$n_0 + target$n_1)
return(rate)
})
plot(seq_along(age_rates), age_rates, main="Age Category")
d_0 <- sum(insurance$y_0) / sum(insurance$n_0)
d_1 <- sum(insurance$y_1) / sum(insurance$n_1)
plot(c(0, 1), c(d_0, d_1), main = "District Category", xlab="District Label")
d.insurance=read.csv("C:/Users/bbecerra/Documents/School/CH8 HW/districtinsurance.csv")
colnames(d.insurance)[1] <- "car"
d.insurance$rate <- d.insurance$y / d.insurance$n
d.insurance$per_100 <-  d.insurance$rate * 100
res.insur<-glm(per_100~car+age+district + age*district + car*district + car*age,family=poisson(),data=d.insurance)
summary(res.insur)
fitted(res.insur)
res.study<-glm(per_100~car+age,family=poisson(),data=d.insurance)
summary(res.study)
anova(res.insur, res.study)
anova(res.insur, res.study, test="chaisquared")
anova(res.insur, res.study, test="Chisq")
###
###
###
## 9.5a
satisfaction=read.csv("C:/Users/bbecerra/Documents/School/CH8 HW/data.csv")
colnames(satisfaction)[1] = "count"
satisfaction$satisfaction <- ordered(satisfaction$satisfaction, levels = c("low", "medium", "high"))
res.loglin <- glm(count~factor(type)+factor(contact)+factor(satisfaction),family=poisson(),data=satisfaction)
summary(res.loglin)
res.polr.tower=glm(count~satisfaction:contact,family=poisson(),data=satisfaction[satisfaction$type == "tower",])
summary(res.polr.tower)
res.polr.apartment=glm(count~satisfaction:contact,family=poisson(),data=satisfaction[satisfaction$type == "apartment",])
summary(res.polr.apartment)
res.polr.house=glm(count~satisfaction:contact,family=poisson(),data=satisfaction[satisfaction$type == "house",])
summary(res.polr.house)
summary(res.polr.tower)
summary(res.polr.apartment)
summary(res.polr.house)
summary(res.polr.all)
ventricular <- read.csv("C:/Users/bbecerra/Downloads/ventricular.csv")
print(ventricular)
colnames(ventricular) <- c("Subject", "Dog", "Type", "Condition 1", "Condition 2", "Condition 3", "Condition 4", "Condition 5", "Condition 6", "Condition 7", "Condition 8")
View(ventricular)
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
packages.install(reshape)
install.packages(reshape)
install.packages("reshape")
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
install.packages("reshape")
install.packages(reshape2)
install.packages("reshape2")
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
stroke
ventricular=melt(ventricular, id.vars=c("Subject", "Dog", "Type"))
ventricular
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(reshape2)
library(ggplot2)
ventricular <- read.csv("C:/Users/bbecerra/Downloads/ventricular.csv")
colnames(ventricular) <- c("Subject", "Dog", "Type", "Condition 1", "Condition 2", "Condition 3", "Condition 4", "Condition 5", "Condition 6", "Condition 7", "Condition 8")
melted_ventricular=melt(ventricular, id.vars=c("Subject", "Dog", "Type"))
ggplot(data = melted_ventricular, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
melted_ventricular
ggplot(data = melted_ventricular, aes(x=variable, y=variable, fill=value)) +
geom_tile()
cormat <- round(cor(ventricular),2)
cormat <- round(cor(ventricular[,3:]),2)
cormat <- round(cor(ventricular[,3:11]),2)
head(cormat)
ventricular[,3:11]
ventricular[,3:12]
ventricular[,4:12]
ventricular[,4:11]
cormat <- round(cor(ventricular[,4:11]),2)
cormat <- round(cor(ventricular[,4:11]),2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "blue",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(0,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0.5, limit = c(0,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
###read data#### local or web####
stroke_wide=read.csv("http://my.ilstu.edu/~mxu2/spring-2018/MAT355/stoke.csv")
library(nlme)
####reformate the data####
library(reshape2)
stroke=melt(stroke_wide, id.vars=c("Subject", "Group"))
stroke$ability=stroke$value
stroke$time=as.numeric(stroke$variable)
stroke
#
# b) Independent Model
#
ind<-corIdent(form = ~ 1 | Subject)
melted_ventricular
#
# b) Independent Model
#
ind<-corIdent(form = ~ 1 | Subject)
gls.ind<-gls(value~Type+variable+Type*variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
gls.ind<-gls(value~Type+variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
#
# b) Independent Model - How to compare using data reduction approach?
# Pooled analysis
#
ind<-corIdent(form = ~ 1 | Subject)
gls.ind<-gls(value~Subject+variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
ind<-corIdent(form = ~ 1 | Type)
gls.ind<-gls(value~Type+variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
#
# b) Independent Model - How to compare using data reduction approach?
# Pooled analysis
#
ind<-corIdent(form = ~ 1 | Subject)
gls.ind<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
ind<-corIdent(form = ~ 1 | Type)
gls.ind<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.ind)
#
# b) Independent Model - How to compare using data reduction approach?
# Pooled analysis
#
ind<-corIdent(form = ~ 1 | Subject)
gls.indSubject<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.indSubject)
ind<-corIdent(form = ~ 1 | Type)
gls.indType<-gls(value~variable, data=melted_ventricular,correlation=ind)
summary(gls.indType)
gls.indSubject$coefficients
gls.indSubject$sigma
gls.indSubject$varBeta
summary(gls.indSubject)
summary(gls.indType)
summary(gls.indSubject)
#
# b) Independent Model
# Pooled analysis
#
# Daa reduction - Independent
ind<-corIdent(form = ~ 1 | Subject)
gls.indSubject<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indSubject)
# Pooled - Independent
ind<-corIdent(form = ~ 1 | Type)
gls.indType<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indType)
#
# c)
#
library(nlme)
random_eff<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject)
summary(random_eff)
random_eff<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject)
summary(random_eff)
random_eff1<-lme(value~Type+variabe+Type*variable,data=melted_ventricular,random=~1|Subject,cor=corAR1())
summary(random_eff1)
random_eff1<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject,cor=corAR1())
summary(random_eff1)
random_eff2<-lme(value~Type,data=melted_ventricular,random=~1|Subject/Type)   ###group nested in the subject
summary(random_eff2)
random_eff3<-lme(value~Type*variable,data=melted_ventricular,random=list(~1|Subject, ~1|Group))   ###group nested in the subject
summary(random_eff3)
random_eff3<-lme(value~Type*variable,data=melted_ventricular,random=list(~1|Subject, ~1|Type))   ###group nested in the subject
summary(random_eff3)
AIC(random_eff)
AIC(random_eff, random_eff1, random_eff2, random_eff3)
chosen_random_eff <- random_eff1
selected_random_eff <- random_eff1
#
# d) GEE Models
#
library(geepack)
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
install.packages("geepack")
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
summary(gee.ind)
#
# d) GEE Models
#
library(geepack)
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
summary(gee.ind)
AIC(gee.ind)
gee.exch<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="exchangeable")
summary(gee.exch)
gee.ar1<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variabke,corst="ar1")
summary(gee.ar1)
gee.ar1<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="ar1")
summary(gee.ar1)
anova(gee.ind,gee.exch, gee.ar1)
anova(gee.ind,gee.exch)
anova(gee.ind,gee.exch,gee.ar1)
summary(gee.ind)
AIC(gee.ind)
gee.ind$coefficients
summary(gls.indType)
summary(gls.indSubject)
summary(selected_random_eff)
summary(gee.ind)
#
# b) Independent Model
# Pooled analysis
#
# Daa reduction - Independent
ind<-corIdent(form = ~ 1 | Subject)
gls.indSubject<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indSubject)
# Pooled - Independent
ind<-corIdent(form = ~ 1 | Type)
gls.indType<-gls(value~Type + variable, data=melted_ventricular,correlation=ind)
summary(gls.indType)
#
# c) Random effect models
#
library(nlme)
random_eff<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject)
summary(random_eff)
random_eff1<-lme(value~Type+variable+Type*variable,data=melted_ventricular,random=~1|Subject,cor=corAR1())
summary(random_eff1)
random_eff2<-lme(value~Type,data=melted_ventricular,random=~1|Subject/Type)   ###group nested in the subject
summary(random_eff2)
random_eff3<-lme(value~Type*variable,data=melted_ventricular,random=list(~1|Subject, ~1|Type))   ###group nested in the subject
summary(random_eff3)
summary(random_eff)
summary(random_eff)
summary(random_eff1)
summary(random_eff2)
summary(random_eff3)
AIC(random_eff, random_eff1, random_eff2, random_eff3)
#
# d) GEE Models
#
library(geepack)
gee.ind<-geeglm(value~Type+variable+Type*variable,family=gaussian, data=melted_ventricular,id=Subject,wave=variable,corst="independence")
summary(gee.ind)
gee.exch<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="exchangeable")
summary(gee.exch)
gee.ar1<-geeglm(value~Type+variable+Type*variable,family=gaussian,data=melted_ventricular,id=Subject,wave=variable,corst="ar1")
summary(gee.ar1)
summary(gee.ind)
e
summary(gee.exch)
summary(gee.ar1)
summary(gee.ar1)
summary(gee.exch)
summary(gee.ind)
summary(gee.ind)
summary(gee.exch)
summary(gee.ar1)
anova(gee.ind,gee.exch,gee.ar1)
gee.ind
summary(gee.ar1)
summary(gee.ar1)
summary(gee.exch)
summary(gee.ind)
library(foreign)
library(ggplot2)
library(MASS)
library(Hmisc)
library(reshape2)
library(VGAM)
library(sure)
library(ordinal)
library(brglm2)
library(tidyverse)
setwd("C:/Users/bbecerra/Documents/Git-Projects/heart-disease-glm")
formatProcessedClevelandData <- function() {
processed.cleveland <- read.csv("data/processed.cleveland.data")
colnames(processed.cleveland) <- c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
processed.cleveland <- as.data.frame(apply(processed.cleveland, 2, as.numeric))
processed.cleveland <- as.data.frame(sapply(processed.cleveland,function(cols) {
if(is.numeric(cols)) ifelse(is.na(cols),median(cols,na.rm=T),cols) else cols}))
return(processed.cleveland)
}
# TODO
formatUnprocessedClevelandData <- function(){
cleveland <- readLines("data/cleveland.data")
matrix <- matro
for(line in cleveland){
print(strsplit(line, " "))
}
data <- list()
curr_row <- list()
lapply(cleveland, function(line){
line_split <- strsplit(line, " ")
if(line_split.contains("name")){
line_split.remove("name")
curr_row.append(line_split)
data.append(curr_row)
curr_row <- list()
} else {
curr_row.append(curr_row)
}
})
}
exploratoryAnalysis <- function(processed.cleveland) {
# Description of what the data looks like
head(processed.cleveland)
# Histogram of the variables
hist(processed.cleveland)
# Summary statistics of dataframe
summary(processed.cleveland)
}
backwardsSelection <- function(model){
backwards <- step(model,trace=0)
summary(backwards)
formula(backwards)
return(backwards)
}
residualDiagnostics <- function ()
cleveland <- formatUnprocessedClevelandData()
processed.cleveland <- formatProcessedClevelandData()
res.polr=polr(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal),data=processed.cleveland)
summary(res.polr)
backwardsSelection(res.polr)
## combined table
(ctable <- cbind(ctable, "p value" = p))
(ci <- confint(res.polr)) # default method gives profiled CIs
residuals.polr <- resids(res.polr)
residuals.polr.std <- (residuals.polr - mean(residuals.polr))/ sd(residuals.polr)
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Old Faithful Eruptions")
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
hist(residuals.polr)
(ctable <- coef(summary(res.polr)))
plot(residuals.polr)
res.clm=clm(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data=processed.cleveland)
summary(res.clm)
(res.clm.ctable <- coef(summary(res.clm)))
backwardsSelection(res.clm)
res.bracl <- bracl(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data = processed.cleveland,
parallel = TRUE, type = "ML")
summary(res.bracl)
(ctable.bracl <- coef(summary(res.bracl)))
backwardsSelection(res.bracl)
# Histogram of the variables
hist(processed.cleveland)
# Summary statistics of dataframe
summary(processed.cleveland)
summary(res.polr)
## combined table
(ctable <- cbind(ctable, "p value" = p))
residualDiagnostics <- function ()
cleveland <- formatUnprocessedClevelandData()
processed.cleveland <- formatProcessedClevelandData()
res.polr=polr(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal),data=processed.cleveland)
summary(res.polr)
(ctable <- coef(summary(res.polr)))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
?clm
?polr
res.bracl <- bracl(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data = processed.cleveland,
parallel = TRUE, type = "ML")
summary(res.bracl)
(ctable.bracl <- coef(summary(res.bracl)))
res.bracl <- bracl(factor(num)~age+factor(sex) + factor(cp) + trestbps + chol + factor(fbs) + factor(restecg) + thalach + factor(exang) + oldpeak + factor(slope) + factor(ca) + factor(thal), data = processed.cleveland,
parallel = TRUE, type = "ML")
summary(res.bracl)
summary(res.polr)
backwardsSelection(res.polr)
model <- res.polr
backwards <- step(model,trace=0)
summary(backwards)
(ctable <- coef(summary(model)))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
model
model
model <- res.polr
backwards <- step(model,trace=0)
(ctable <- coef(summary(model)))
summary(backwards)
(ctable <- coef(backwards))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
summary(backwards)
## combined table
(ctable <- cbind(ctable, "p value" = p))
<
model <- res.polr
backwards <- step(model,trace=0)
summary(backwards)
formula(backwards)
(ctable <- coef(backwards))
## calculate and store p valuesfitted(res.polr)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
formula(backwards)
summary(backwards)
formula(model)
summary(model)
residuals.polr <- resids(res.polr)
residuals.polr.std <- (residuals.polr - mean(residuals.polr))/ sd(residuals.polr)
hist(residuals.polr.std)
res.polr <- backwardsSelection(res.polr)
residuals.polr <- resids(res.polr)
residuals.polr.std <- (residuals.polr - mean(residuals.polr))/ sd(residuals.polr)
hist(residuals.polr.std)
plot(residuals.polr.std)
plot(main="Residual Plot", residuals.polr.std)
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Old Faithful Eruptions")
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="REsiduals QQ")
qqnorm(residuals.polr.std,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Residuals QQ")
?resids
(ci <- confint(res.polr)) # default method gives profiled CIs
